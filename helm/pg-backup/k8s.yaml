---
# Source: pg-backup-zen/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata: 
  name: db-backups
  labels: 
    app.kubernetes.io/name: pg-backup
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: pg-backup-zen-1.0.0
---
# Source: pg-backup-zen/templates/pg-backup-config-configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-backup-zen-pg-backup-config
  labels: 
    app.kubernetes.io/name: pg-backup
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: pg-backup-zen-1.0.0
  namespace: db-backups
data:
  DB_HOST: "db-address.rds.amazonaws.com"
  DB_PORT: "54325"
  TEAMS_NOTIFICATION: "true"
  DAYS_TO_KEEP: "5"
  DAY_OF_WEEK_TO_KEEP: "5"
  WEEKS_TO_KEEP: "7"
  FAILED_TEAMS_URL: "https://myorg.webhook.office.com/webhookb2/blob-blob-blob"
  SUCCEEDED_TEAMS_URL: "https://myorg.webhook.office.com/webhookb2/blob-blob-blob"
---
# Source: pg-backup-zen/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-postgres
  namespace: db-backups
  labels: 
    app.kubernetes.io/name: pg-backup
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: pg-backup-zen-1.0.0

spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard
  volumeMode: Filesystem
---
# Source: pg-backup-zen/templates/cronjob-one-by-one.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pg-backup-zen-one-by-one
  namespace: db-backups
spec:
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
            - args:
              - /app/pypg_backup_rotated.sh
              envFrom:
                - configMapRef:
                    name: pg-backup-zen-db-data
              env:
                - name: BACKUP_DIR
                  value: /backups
              image: avidcloud/pg-backup-zen:latest
              imagePullPolicy: IfNotPresent
              name: dumper
              resources: map[limits:map[cpu:4 memory:4Gi] requests:map[cpu:1 memory:1Gi]]
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /backups
                  name: backups
                - mountPath: /app/creds.json
                  subPath: creds.json
                  name: credentials
                  readOnly: true
          containers:
            - command:
              - "bash"
              - "-c"
              args:  
                - >
                  aws s3 sync --delete /backups s3://$(BUCKET_NAME)/postgres-rds/ && curl -H 'Content-Type: application/json' -d '{"title": "PostgreSQL backups successfully synced with S3 Bucket","text":"Pod name: $(KUBERNETES_POD_NAME)"}' $(SUCCEEDED_TEAMS_URL) || curl -H 'Content-Type: application/json' -d '{"title": "PostgreSQL backups failed to be synced with S3 Bucket","text":"Job name: $(KUBERNETES_POD_NAME)"}' $(FAILED_TEAMS_URL)
              envFrom:
                - configMapRef:
                    name: pg-backup-zen-pg-backup-config
                - secretRef:
                    name: pg-backup-zen-s3-credentials
              env:
                - name: KUBERNETES_POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
              image: amazon/aws-cli:2.13.6
              imagePullPolicy: IfNotPresent
              name: uploader
              resources:
                requests:
                  cpu: "1"
                  memory: 1Gi
                limits:
                  cpu: "4"
                  memory: 4Gi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /backups
                  name: backups
          restartPolicy: Never
          terminationGracePeriodSeconds: 30
          volumes:
            - name: backups
              persistentVolumeClaim:
                claimName: 	backup-postgres
            - name: credentials
              secret:
                defaultMode: 0400
                items:
                  - key: creds.json
                    path: creds.json
                secretName: pg-backup-zen-db-data
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  schedule: 0 0 * * *
  successfulJobsHistoryLimit: 3
