# Two possible ways of backuping strategies are: allInOne & oneByOne
backupType: oneByOne
hostname: mydb.rds.amazonaws.com
port: 54325

global:
  charset: 
  namespace: db-backups
  createNamespace: true
  rotation: true
  #### SETTINGS FOR ROTATED BACKUPS ####
  rotation_config:
  # Which day to take the weekly backup from (1-7 = Monday-Sunday)
    dayOfWeekToKeep: 5
  # Number of days to keep daily backups
    daysToKeep: 7  
  # How many weeks to keep weekly backups
    weeksToKeep: 5
  teamsNotification: true
  succeededTeamsURL: https://myorg.webhook.office.com/webhookb2/blob-blob-blob
  failedTeamsURL: https://myorg.webhook.office.com/webhookb2/blob-blob-blob

cronjob:
  # image: avidcloud/pg-backup-zen:12.1
  pullSecrets: 
  pullPolicy: IfNotPresent
  restartPolicy: Never
  resources: 
     requests:
       cpu: 1
       memory: "1Gi"
     limits:
       cpu: 4
       memory: "4Gi"
  schedule: "0 0 * * *"
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 3
  storage:
    createPVC: true
    PVCName: backup-postgres
    storageClass: standard
    accessMode: ReadWriteMany
    PVCSize: 20Gi

allInOne:
# Optional username to connect to database as.  Will default to "postgres" if none specified.
# USERNAME
  username: postgres

# Mandatory password to connect to database with.
# PASSWORD_SECRET
  adminPasswordSecretName: pg-admin-password-secret

  
# List of strings to match against in database name, separated by space or comma, for which we only
# wish to keep a backup of the schema, not the data. Any database names which contain any of these
# values will be considered candidates. (e.g. "system_log" will match "dev_system_log_2010-01")
# SCHEMA_ONLY_LIST

# Will produce a custom-format backup if set to "yes"
# ENABLE_CUSTOM_BACKUPS=yes
  enableCustomBackups: true
# Will produce a gzipped plain-format backup if set to "yes"
# ENABLE_PLAIN_BACKUPS=no
  enablPlainBackups: false

# Will produce gzipped sql file containing the cluster globals, like users and passwords, if set to "yes"
# ENABLE_GLOBALS_BACKUPS=yes

oneByOne:
# This secret must contain: DB_HOST, DB_PORT, creds.json
  # DB_HOST: string
  # DB_PORT: numeric
  # creds.json: 
    # [
    # {
      # "database_name": "",
      # "username": "",
      # "password": ""
    # },..
    # ]
  # dbDataSecretName is the name of the secret where the database secret data is stored (can be used instead of dbData)
  # dbDataSecretName: pg-db-data-secret
  dbData:
    - database_name: db1
      username: user1
      password: password1
    - database_name: db2
      username: user2
      password: password2

##### SETTINGS FOR AWS S3 ####
backupUpload:
  active: true
# Supported objectStorages are: MinIO and AWS_S3
  ObjectStorageType: AWS_S3
  # S3SecretName is the name of the secret where the s3 secret data is stored (can be used instead of AWS_S3)
  # S3SecretName: s3-secret-name
  AWS_S3:
    AWS_ACCESS_KEY_ID:
    AWS_DEFAULT_REGION:
    AWS_SECRET_ACCESS_KEY:
    BUCKET_NAME:
  # MinIOSecretName is the name of the secret where the minio secret data is stored (can be used instead of MINIO)
  # MinIOSecretName: minio-secret-name
  MINIO:
    MINIO_ACCESS_KEY_ID:
    MINIO_URL:
    MINIO_SECRET_ACCESS_KEY:
    BUCKET_NAME: